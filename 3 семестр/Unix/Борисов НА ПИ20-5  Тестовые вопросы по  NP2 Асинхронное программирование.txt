NP2 Асинхронное программирование

Блокирующие операции модуля socket при условии, что Socket.setblocking(1)
+: Socket.accept()
+: Socket.recv()
-: Socket.listen()
-: Scoket.settimeout()
-: Socket.close()
-: Socket.shutdown()

Многозадачность имеет следующие преимущества
+: выигрыш по скорости
-: трата ресурсов на переключение и создание процессов (или потоков)
-: не бывает взаимоблокировки
+: выполнение операций в фоне
-: простота отладки
-: потокобезопасность
-: не возникает конфликтов при доступе к общим ресурсам

Модули для параллельного программирования на Python
+: Threading
-: Pyplot
+: Multiprocessing
+: Async.io
-: sys
-: os

Количество вновь созданных процессов при пятикратном вызове .start() объекта Tread модуля Tread
+: 0
-: 1
-: 2
-: 3
-: 4
-: 5

Количество вновь созданных процессов при пятикратном вызове .start() объекта Process подуля Multiprocessing
-: 0
-: 1
-: 2
-: 3
-: 4
+: 5

Создание потока-демона происходит так
+: при создании указывается параметр daemon = True
+: вызывается Thread.setDaemon()
+: атрибут указывается напрямую thread.daemon = True
-: вызывается метод Tread.isDaemon()
-: вызывается метод Tread.start()
-: при создании передается параметр name = daemon

Процессы модуля Multiprocessing управляются
-: пользователем - создателем программы по его логике
-: логикой модуля Multiprocessing
-: неуправляемы
+: операционной системой
-: объектом Lock модуля

Следующий модуль использует свои блокирующие функции
-: Multiprocessing
-: Treading
-: sys
+: Async.io
-: os

Следующие вычисления хорошо распараллеливаются
-: где следующий шаг зависит от предыдущего 
+: большое количество независимых (друг от друга) операций
+: рендеринг изображений
+: вычисление хешей
-: чтение файла
-: вычисление линейной функции

Масштабируемость в модуле Multiprocessing зависит от
-: тактовой частоты процессора
-: поддержки виртуализации
-: наличия встроенного графического ядра в процессоре
+: количества физических ядер процессора
-: ничего из вышеперечисленного

Масштабируемость в модуле Multiprocessing
+: десятки раз
-: сотни раз
-: тысячи раз
-: миллионы раз
-: определяется пользователем

Масштабируемость в модуле Thrading
-: десятки раз
+: сотни раз
-: тысячи раз
-: миллионы раз
-: определяется пользователем

Масштабируемость в модуле Acync.io
-: десятки раз
-: сотни раз
+: больше тысячи
-: не масштабируется
-: зависит от операционной системы

В модуле Treading для потоков создается
-: один отдельный интерпретатор для всех дочерних
-: для каждого потока свой интерпретатор
-: количество интерпретаторов не регламентировано
-: количеством управляет операционная система
+: не создается отдельный интерпретатор

Замки в Thrading
-: блокируют доступ к ресурсу только для потока
+: блокируют доступ к ресурсу для всех потоков программы
-: не блокируют доступ к ресурсам
-: пользователь сам определяет каким потокам доступ заблокирован
-: ОС определяет каким потокам доступ заблокирован

Класс Thread имеет следующие методы
-: .bind()
+: .run()
+: .start()
-: .listen()
-: .await()
+: isAlive()

Следующие модули имеют класс Lock
+: treading
+: asyncio
+: multiprocessing
-: sys
-: os
-: socket

Выберите примеры паралельных процессов
+: сборка детали на множестве идентичных конвейеров
-: передвижение из точки А в точку Б
-: написание кода одним программистом
+: вычисление хэшей
-: написание книги
+: обработка сервером нескольких пользователей
